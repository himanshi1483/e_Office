@model e_Office.Models.InwardEntry
@{
    ViewBag.Title = "View File";
}

<style>
    .GreenNote {
        min-height: 100px;
        background-color: #d1f5cd;
        width: 100%;
        text-align: justify;
    }

    .YellowNote {
        min-height: 100px;
        background-color: #f6e585;
        width: 100%;
        text-align: justify;
    }

    .replyGreenNote {
        min-height: 100px;
        background-color: #58b582;
        color: white;
        margin-left: 20px;
        width: 80%;
        text-align: justify;
    }

    .replyYellowNote {
        height: 100px;
        background-color: #ebeaea;
        text-align: justify;
    }

    /*#ForwardedTo {
        width: 450px !important;
    }*/

    .select2 {
        min-width: 350px;
        overflow: hidden;
    }
</style>

<div class="row">
    <div class="col-md-6" id="docPanel">
        @*<a href="https://localhost:44328/ViewerJS/#../Documents/Temp/@Model.DocumentName" >DOC</a>*@
        <div class="card">
            <div class="card-header">
                <h5 class="card-title m-b-0">View Document</h5>
            </div>
            <div class="card-body">
                <iframe src="https://docs.google.com/viewer?srcid=@Model.DocumentLocation&pid=explorer&efh=false&a=v&chrome=false&embedded=true" width="750" height="850"></iframe>
            </div>
        </div>
    </div>
    <div class="col-md-6" id="divNotes">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title m-b-0">View Inward Entry</h5>
            </div>
            <div class="card-body">
                <div>
                    <button class="btn btn-success btn-sm" id="btnGreen">Add Green Note</button>
                    <button class="btn btn-warning btn-sm" id="btnYellow">Add Yellow Note</button>
                </div>
                <input hidden id="hiddenNotesId" value="" />
                @*<form enctype="multipart/form-data" method="post">*@

                    <div class="card" id="note1" style="display:none">
                        <div class="card-body">
                            <h4 class="card-title">Green Note</h4>
                            @Html.HiddenFor(x => x.InwardId)
                            <div class="editor GreenNote" id="editor1" name="NoteText">
                            </div>
                            @Html.HiddenFor(x => x.Notes.NoteText, new { @name = "Notes.NoteText", @class = "greenNote editor" })
                            <div class="card-footer row" style="padding-top:15px;display:none" id="divSignGreen">
                                <div class="col-md-3 float-left">
                                    <label class="control-label">Upload Signature</label>
                                </div>
                                <div class="col-md-6">
                                    <div class="custom-file">
                                        <input type="file" class="custom-file-input" name="file" id="fileSign1" onchange="readURL1(this);">
                                        <label class="custom-file-label" for="file">Choose file...</label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <img id="imgSign1" src="~/Images/default-sign.jpg" height="80" width="150" alt="your image" />
                                </div>
                            </div>
                        </div>
                        <div class="text-right" style="margin-right:20px">
                            <button class="btn btn-dark btn-sm" style="display:none" disabled type="button" id="btnSaveGreen">Submit</button>
                            <button class="btn btn-sm btn-dark" style="display:none" title="Add Digital Signature" id="btnSignGreen" type="button">Add Digital Signature</button>
                        </div>
                    </div>
             
                <div class="card" id="note2" style="display:none">
                    <div class="card-body">
                        <h4 class="card-title">Yellow Note</h4>
                        @Html.HiddenFor(x => x.InwardId)
                        <div class="editor YellowNote" id="editor2" name="NoteText">
                        </div>
                        @Html.HiddenFor(x => x.Notes.NoteText, new { @name = "Notes.NoteText", @class = "greenNote editor" })
                        <div class="card-footer row" style="padding-top:15px;display:none" id="divSignYellow">
                            <div class="col-md-3">
                                <label class="control-label">Upload Signature</label>
                            </div>
                            <div class="col-md-6">
                                <div class="custom-file">
                                    <input type="file" class="custom-file-input" name="file" id="fileSign2" onchange="readURL2(this);">
                                    <label class="custom-file-label" for="file">Choose file...</label>

                                </div>
                            </div>
                            <div class="col-md-3">
                                <img id="imgSign2" src="~/Images/default-sign.jpg" height="80" width="150" alt="your image" />
                            </div>
                        </div>
                    </div>
                    <div class="text-right" style="margin-right:20px">
                        <button class="btn btn-dark btn-sm" style="display:none" disabled type="submit" id="btnSaveYellow">Submit</button>
                        <button class="btn btn-sm btn-dark" style="display:none" title="Add Digital Signature" id="btnSignYellow" type="submit">Add Digital Signature</button>
                    </div>
                </div>

                <hr />
                @if (Model.NotesList.Count() > 0)
                {
                    <div class="card">
                        <div class="card-header"> <h4 class="card-title">Notes</h4></div>

                        @foreach (var item in Model.NotesList.Where(x => x.RepliedToNote == 0).OrderByDescending(x => x.NotesId))
                        {
                            <div class="card-body @(item.NoteType)Note">
                                @Html.Raw(Server.HtmlDecode(item.NoteText))
                            </div>
                            <div class="card-text p-l-20 p-t-10 col-md-12">
                                <div class="col-md-6 float-left"><i class="fa fa-check" style="color:forestgreen;font-size:18px;"></i>  Signed By: @item.CreatedBy <p> @item.CreatedDate.ToLongDateString() @item.CreatedDate.ToShortTimeString()</p></div>
                                @if (item.ForwardedOn != null)
                                {
                                    <div class="col-md-6 float-right text-right">Forwarded To: @item.ForwardedTo <p> @item.ForwardedOn.Value.ToLongDateString()  @item.ForwardedOn.Value.ToShortTimeString()</p></div>
                                }
                            </div>
                            <div class="card-footer text-right">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-danger btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Action</button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item fwdLink" href="#" data-value="@item.NotesId" onclick="showFwdDiv(this.getAttribute('data-value'));">Forward</a>
                                        <a class="dropdown-item" href="#" data-value="@item.NotesId">Close</a>
                                        <a class="dropdown-item" href="#" data-value="@item.NotesId" onclick="showReplyDiv(this.getAttribute('data-value'));">Reply</a>

                                    </div>
                                </div>
                            </div>
                            <hr style="margin:0" />

                            foreach (var reply in Model.NotesList.Where(x => x.RepliedToNote == item.NotesId).OrderBy(x => x.CreatedDate))
                            {
                                <div class="@(item.NoteType)Note" style="margin-left:50px;width:93% !important">
                                    <div class="card-text p-l-20 p-t-10">Replied By: @reply.CreatedBy on @reply.CreatedDate.ToLongDateString()  @reply.CreatedDate.ToShortTimeString()</div>
                                    <div class="card-body">
                                        @Html.Raw(Server.HtmlDecode(reply.NoteText))
                                    </div>
                                </div>
                                <hr style="margin:0;margin-left:50px;" />
                                <div class="card-footer text-right">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-danger btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Action</button>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item fwdLink" href="#" data-value="@reply.NotesId" onclick="showFwdDiv(this.getAttribute('data-value'));">Forward</a>
                                            <a class="dropdown-item" href="#" data-value="@item.NotesId">Close</a>
                                            <a class="dropdown-item" href="#" data-value="@reply.NotesId" onclick="showReplyDiv(this.getAttribute('data-value'));">Reply</a>

                                        </div>
                                    </div>
                                </div>
                            }
                            <p style="height:5px;background:white"></p>
                            <div id="append_@item.NotesId"></div>

                        }

                    </div>
                }

                @*<div class="card-body replyDiv" style="display:none">
                        <div class="editor replyYellowNote" id="editor3" name="ReplyText">
                        </div>
                        @Html.HiddenFor(x => x.Notes.ReplyText, new { @name = "ReplyText", @class = "greenNote editor" })
                        <div class="text-right" style="padding-top:10px">
                            <button class="btn btn-dark btn-sm" type="button" id="btnReplyNote">Submit</button>
                        </div>
                    </div>*@

            </div>
        </div>
    </div>
    <div class="col-md-6" id="divFwd" style="display:none">
        <form id="formForward" method="post" enctype="multipart/form-data">
            <div class="card">
                @Html.HiddenFor(x => x.InwardId)
                <div class="card-header"><h4>Forward Note</h4></div>
                <div class="card-body">
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Inward Number: </label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.InwardNumber, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Subject:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.Subject, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Inward Date:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.InwardDate, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Due Date:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.DueDate, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Priority:</label>
                        </div>
                        <div class="col-md-6">
                            @Enum.GetName(typeof(e_Office.Models.EnumModel.Priority), Convert.ToInt32(Model.Priority))
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Classification:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.ClassificationMaster.ClassificationName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">From:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.From, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row" id="fwd1">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes.FwdToDept, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.DropDownList("FwdToDept", null, "-Select", new { @class = "select2 form-control m-t-15", @multiple = "multiple" })
                            @Html.ValidationMessageFor(model => model.Notes.FwdToDept, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row" id="fwd2">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes.ForwardedTo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.DropDownList("ForwardedTo", null, "-Select", new { @class = "select2 form-control custom-select" })
                            @Html.ValidationMessageFor(model => model.Notes.ForwardedTo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row" id="fwd3">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes.FwdToCC, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.DropDownList("FwdToCC", null, "-Select", new { @multiple = "multiple", @class = "select2 form-control m-t-15" })
                            @Html.ValidationMessageFor(model => model.Notes.FwdToCC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right">
                    <button type="button" onclick="hideFwdDiv();" class="btn btn-md btn-secondary">Close</button>
                    <button type="button" id="btnForward" class="btn btn-success btn-md">Send</button>
                </div>
            </div>
        </form>
    </div>
    <div class="col-md-6" id="divReply" style="display:none">
        <form id="formReply" method="post" enctype="multipart/form-data">
            <div class="card">
                @Html.HiddenFor(x => x.InwardId)
                <div class="card-header"><h4>Reply To Note</h4></div>
                <div class="card-body">
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Inward Number: </label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.InwardNumber, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Subject:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.Subject, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Inward Date:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.InwardDate, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Due Date:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.DueDate, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Priority:</label>
                        </div>
                        <div class="col-md-6">
                            @Enum.GetName(typeof(e_Office.Models.EnumModel.Priority), Convert.ToInt32(Model.Priority))
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">Classification:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.DisplayFor(x => x.ClassificationMaster.ClassificationName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            <label class="control-label">From:</label>
                        </div>
                        <div class="col-md-6">
                            @Html.TextBoxFor(x => x.From, null, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes.ReplyToDept, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.DropDownList("ReplyToDept", null, "-Select", new { @class = "select2 form-control m-t-15", @multiple = "multiple" })
                            @Html.ValidationMessageFor(model => model.Notes.ReplyToDept, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes.ReplyTo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.TextBox("ReplyTo", Model.CreatedBy, new { @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Notes.ReplyTo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Notes.ReplyToCC, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @Html.DropDownList("ReplyToCC", null, "-Select", new { @multiple = "multiple", @class = "select2 form-control m-t-15" })
                            @Html.ValidationMessageFor(model => model.Notes.ReplyToCC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-3">
                            @Html.Label("Reply Note", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            <div class="editor replyYellowNote" id="editor3" name="ReplyText">
                            </div>
                            @Html.HiddenFor(x => x.Notes.ReplyText, new { @name = "ReplyText", @class = "editor" })
                        </div>
                    </div>
                </div>
                <div class="card-footer text-right">
                    <button type="button" onclick="hideReplyDiv();" class="btn btn-md btn-secondary">Close</button>
                    <button type="button" id="btnReply" class="btn btn-success btn-md">Send</button>
                </div>
            </div>
        </form>
    </div>
</div>



<script>
    function readURL1(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgSign1')
                    .attr('src', e.target.result)
                    .width(100)
                    .height(100);
            };

            reader.readAsDataURL(input.files[0]);
                        $("#btnSaveGreen").prop("disabled", false);
        }
    }
    function readURL2(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imgSign2')
                    .attr('src', e.target.result)
                    .width(100)
                    .height(100);
            };

            reader.readAsDataURL(input.files[0]);
            $("#btnSaveYellow").prop("disabled", false);
        }
    }

    function showFwdDiv(noteId) {
        $("#divFwd").show();
        console.log(noteId);
        $("#hiddenNotesId").val(noteId);
        $("#divNotes").hide();
    }

    function hideFwdDiv() {
        $("#divFwd").hide();
        $("#divNotes").show();
    }

      function showReplyDiv(noteId) {
        $("#divReply").show();
        console.log(noteId);
        $("#hiddenNotesId").val(noteId);
        $("#divNotes").hide();
    }

    function hideReplyDiv() {
        $("#divReply").hide();
        $("#divNotes").show();
    }

    function fun(one) {
        console.log(one);
        $(".replyDiv").toggle();
         $("#hiddenNotesId").val(one);
        $("#append_"+one).append($(".replyDiv"));
    }

    function setVal(one) {
        console.log(one);
        $("#hiddenNotesId").val(one);
        $('#forward-to').modal('show');
    }

    function openSign(noteId) {
        $("#hiddenNotesId").val(noteId);
        $('#digitalSign').modal('show');
    }

     $('#action').on('change', function() {
      if ( this.value == '2')
      {
       $("#fwd1").show();
       $("#fwd2").show();
       $("#fwd3").show();
      }
      else
      {
     $("#fwd1").hide();
       $("#fwd2").hide();
       $("#fwd3").hide();
      }
    });

    $('#btnGreen').click(function ()
    {
          $("#note1").toggle();
          $("#note2").hide();
          $("#btnSaveYellow").hide();
            $("#btnSaveGreen").toggle();
          $("#btnSignYellow").hide();
          $("#btnSignGreen").toggle();
    });

    $("#btnSignGreen").click(function () {
         $("#divSignGreen").toggle();
    });

    $("#btnSignYellow").click(function () {
         $("#divSignYellow").toggle();
    });

    $('#btnYellow').click(function ()
    {
        $("#note2").toggle();
        $("#note1").hide();
        $("#btnSaveYellow").toggle();
        $("#btnSaveGreen").hide();
           $("#btnSignYellow").toggle();
          $("#btnSignGreen").hide();
    });
    var quill = new Quill('#editor1', {
        theme: 'snow'
    });
     var quill = new Quill('#editor2', {
        theme: 'snow'
     });
     var quill = new Quill('#editor3', {
        theme: 'snow'
    });

     $('#btnSaveSign').click(function () {
           var url = "@Url.Action("SaveSign","InwardNotes")";
         var fileUpload = $('#fileSign').get(0);
         console.log(fileUpload[0]);
           var files = fileUpload.files;
            var noteId = $("#hiddenNotesId").val();
            // Create FormData object
            var fileData = new FormData();

            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append(files[i].name, files[i]);
            }

            // Adding one more key to FormData object
            fileData.append('NoteId', noteId);
              $.ajax({
                type: "POST",
                url: url,
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: fileData,

                 }).done(function (res) {
                 location.reload();
            });
     });

    $('#btnSaveGreen').click(function () {
            var _content =document.getElementById("editor1").getElementsByClassName('ql-editor');
            var about = document.getElementsByName('NoteText');
            about.value = JSON.stringify(_content[0].firstElementChild.innerHTML);
            var fileUpload = $('#fileSign1').get(0);
            var files = fileUpload.files;
            var formData = new FormData();
           // alert(files[0].name);
            formData.append("NoteText", about.value);
            formData.append("InwardId", @Model.InwardId);
            formData.append(files[0].name, files[0]);
            var url = "@Url.Action("AddGreenNote","InwardNotes")";
            $.ajax({
                type: "POST",
                url: url,
                data: formData,
               // dataType: 'json',
                contentType: false,
                processData: false,
                success: function (msg)
                {
                    location.reload();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(XMLHttpRequest);
                    console.log(textStatus);
                }
            });
        });


     $('#btnSaveYellow').click(function () {
            var _content = document.getElementById("editor2").getElementsByClassName('ql-editor');
            var about = document.getElementsByName('NoteText');
            console.log(_content);
            about.value = JSON.stringify(_content[0].firstElementChild.innerHTML);
            var url = "@Url.Action("AddYellowNote","InwardNotes")";
           var fileUpload = $('#fileSign2').get(0);
            var files = fileUpload.files;
            var formData = new FormData();
           // alert(files[0].name);
            formData.append("NoteText", about.value);
            formData.append("InwardId", @Model.InwardId);
            formData.append(files[0].name, files[0]);
         $.ajax({
             type: "POST",
             url: url,
             data: formData,
            // dataType: 'json',
             contentType: false,
             processData: false,
              success: function (msg)
                {
                    location.reload();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(XMLHttpRequest);
                    console.log(textStatus);
                }
         });

     });

     $('#btnReply').click(function () {
         var _content = document.getElementById("editor3").getElementsByClassName('ql-editor');
         var about = document.getElementsByName('ReplyText');
         console.log(_content);
         about.value = JSON.stringify(_content[0].firstElementChild.innerHTML);
         var noteId = $("#hiddenNotesId").val();
         var _reply = $("#ReplyTo").val();
         var _replyDept = $("#ReplyToDept").val();
         var _replyCC = $("#ReplyToCC").val();
         var url = "@Url.Action("ReplyNote","InwardNotes")";
         var model = { ReplyTo: _reply, ReplyToDept: _replyDept, ReplyToCC: _replyCC, NoteText: about.value, NoteId: noteId };

              $.ajax({
                type: "POST",
                data: JSON.stringify(model),
                url: url,
                contentType: "application/json"
              }).done(function (res)
              {
                     location.reload();

                 });

        });

     $('#btnForward').click(function () {
           var noteId = $("#hiddenNotesId").val();// document.getElementById("btnForward").getAttribute('data-value');
            //  alert(noteId);
         var _forwarded = $("#ForwardedTo").val();
         var _fwdDept = $("#FwdToDept").val();
          var _fwdCC = $("#FwdToCC").val();
            //  alert(_forwarded);
           var url = "@Url.Action("ForwardInward","InwardNotes")";
          var model = { ForwardedTo :_forwarded, FwdToDept: _fwdDept, FwdToCC: _fwdCC,  NoteId:noteId};
              $.ajax({
                type: "POST",
                data: JSON.stringify(model),
                url: url,
                contentType: "application/json"
                 }).done(function (res) {
                    location.reload();
            });
    });
</script>
